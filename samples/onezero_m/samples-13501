======== SAMPLE 1 ========
 the two best apps for managing your day-to-day stress:

* Slack

* Todoist

* I/O

The first app is designed to help you kickstart a conversation. It’s helpful if you:

* Need to track your shopping behavior in case you need to buy something

* Need to send an email

* Need to check the stocks you’ve been stockpiling

* Need to take a test drive at work

* Need to shop at Whole Foods

In other words, Slack is designed to help you kickstart a conversation. Todoist, on the other hand, seeks to help you accomplish what Slack does not. It provides the illusion of a more effective and inclusive chat system, but it’s really a productivity app for kicking the crap out of people.

The design of Todoist is fundamentally sound. It tries to be a nicer app than the competition, yet it’s still aimed squarely at the modern office-bedeck office environment. The company literally built the entire product around a meeting-based culture, where meetings define productivity. The inspiration for Todoist came from a product called [Pencil](&lt;|url|&gt;).

If you’re looking for tension, there’s a lot of it. The app gives you a ton of options for reporting, organizing, and reporting. But the core functionality of Todoist — to list things off todo, and to follow up on things that you’ve already started — is fundamentally flawed. It’s a pain in the ass to use, and it’s a significant usability issue. I’ve used Todoist for three years, and I’ve made my living around tracking things. Three years is a pretty long time, and the company should be kicking itself for being so inept at one of their core product functions.

The general direction of business innovation in the last 20 years has been downwards, with the rise of software and internet apps, and more specifically the rise of software development as a profession. The economic value of software has increased 60 percent, with an even greater 900 percent since the 1980s. The run rate of growth for programmers has also been extraordinary, with global GDP [reaching an astonishing $1 trillion](&lt;|url|&gt;) in 2013.

Recent statistical research suggests that the run rate of software developers is also [doubling](&lt;|url|&gt;) annually. In 2011, there were approximately [45,000 openings](&lt;|url|&gt;) for software developers in the United States. Now there are nearly [200,000](&lt;|url|&gt;) openings each year. Computer science, engineering, and mathematics (often abbreviated as “computer science”) are now much more than just software devs; they represent a revolution in methodology and practice, as companies like Google are trying to optimize the data they produce and the services they provide.
> # Current approaches to coding show how little traction engineers and managers have with regards to women and minorities in tech.

The sheer number of developers making tech products is growing. The [2012 Google I/O Developer Conference](&lt;|url|&gt;) introduced developers to a new generation of digital creatives, millions of of whom were inspired to craft the software they created. Executives and coaches were hoping these new voices would amplify the voice of underrepresentation and marginalia.

There was just one problem: Those new voices are increasingly drowned out by the tidal wave of products… everything from [personal fitness trackers](&lt;|url|&gt;) to [artificial intelligence bots](&lt;|url|&gt;), which are performing basic tasks [online](&lt;|url|&gt;) as well as in person, taking on the persona and targeting the needs of the gig economy. We can’t let this happen, and we can’t allow the next generation of Silicon Valley be overrun by unfriendly neighbors.

The second wave arrived in the form of performance marketers, game-tracking platforms, and productivity apps designed to tick every box in between. It is very hard to be extra careful when selling something with gimmicky design. The following are some of the pitfalls:

* The focus should be on technologies that are easy to use, understandable, and commercially viable. These technologies are not easy to use, understandable, or commercially viable.

* The normalization of technology transfer is rife. Anything that makes it harder for companies to further engineer or commercialize technology is a good thing. However, loosening privacy regulations, or targeting workers with anti-union or environmental policies that fail to take into account the disproportionate impact of automation in processes which do not create jobs
